<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Pythonic🐶</title>
    <link>http://danigong.github.io/tags/python/</link>
    <description>Recent content in Python on Pythonic🐶</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 12 Mar 2018 15:29:43 +0800</lastBuildDate>
    
	<atom:link href="http://danigong.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fluent Python Reading Notes</title>
      <link>http://danigong.github.io/fp_reading_notes/</link>
      <pubDate>Mon, 12 Mar 2018 15:29:43 +0800</pubDate>
      
      <guid>http://danigong.github.io/fp_reading_notes/</guid>
      <description>1 dict() is slower than {} list() is slower than () 需要符号查找（不能预先知道list()有没有被重定义） 方法调用 要检查有没有可迭代变量传入 2 特殊方法 __len__() __getitem__() __setitem__() __iter__() 是为了被py</description>
    </item>
    
    <item>
      <title>How to update hugo blog</title>
      <link>http://danigong.github.io/post/how_to_update_hugo_blog/</link>
      <pubDate>Wed, 07 Mar 2018 16:45:07 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/how_to_update_hugo_blog/</guid>
      <description>Quick Start
 1. Open iTerm2 2. control+command+h to open the tab with hugo profile 3. addblog to create a new blog post, hugo command will create a new post tesmplate and subl command will help open it. 4. Note: Blog Title should not contain space and strip out menu = &amp;quot;main&amp;quot; in the template. 5. deployblog to deploy newest update to github.  Detail
create blog shell script:
echo &amp;quot;Blog Title: &amp;quot; read Title cd /Users/DanielGong/HugoSite/testsite hugo new post/$Title.</description>
    </item>
    
    <item>
      <title>The best django project structure</title>
      <link>http://danigong.github.io/post/the-best-django-project-structure/</link>
      <pubDate>Mon, 05 Mar 2018 11:01:39 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/the-best-django-project-structure/</guid>
      <description>项目目录结构 在上一节里我们使用Django的django-admin startproject命令来创建了一个Helloworld的项目，在没</description>
    </item>
    
    <item>
      <title>cookiecutter for django</title>
      <link>http://danigong.github.io/post/cookiecutter-for-django/</link>
      <pubDate>Mon, 05 Mar 2018 10:59:16 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/cookiecutter-for-django/</guid>
      <description>cookiecutter 这是一个专门用于创建项目目录结构的工具，同时也是使用Python来实现的，它可以使用一个模板来创建一个项目，比如上面我介绍的项目目录结构实</description>
    </item>
    
    <item>
      <title>Centos&#43;nginx&#43;uwsgi&#43;django</title>
      <link>http://danigong.github.io/post/django_uwsgi_nginx/</link>
      <pubDate>Sun, 24 Dec 2017 20:50:30 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/django_uwsgi_nginx/</guid>
      <description>https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html http://www.jianshu.com/p/7494560da3e6
This is our stack:
the web client &amp;lt;-&amp;gt; the web server &amp;lt;-&amp;gt; the socket &amp;lt;-&amp;gt; uWSGI &amp;lt;-&amp;gt; Python</description>
    </item>
    
    <item>
      <title>Python Coroutine</title>
      <link>http://danigong.github.io/post/python_coroutine/</link>
      <pubDate>Mon, 15 Aug 2016 22:14:50 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/python_coroutine/</guid>
      <description>协程 协程，又称微线程，纤程。英文名Coroutine。 协程的概念很早就提出来了，但直到最近几年才在某些语言（如Lua）中得到广泛应用。 子程序</description>
    </item>
    
    <item>
      <title>Python Generator</title>
      <link>http://danigong.github.io/post/python_generator/</link>
      <pubDate>Fri, 15 Jul 2016 22:07:29 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/python_generator/</guid>
      <description>生成器 通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很</description>
    </item>
    
    <item>
      <title>Machine Learning &amp; Deep Learning</title>
      <link>http://danigong.github.io/post/ml_materials/</link>
      <pubDate>Sun, 10 Jul 2016 14:03:09 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/ml_materials/</guid>
      <description>机器学习(Machine Learning)&amp;amp;深度学习(Deep Learning)资料(Chapter 1) 注:机器学习资料篇目一共500</description>
    </item>
    
    <item>
      <title>Configure Venv</title>
      <link>http://danigong.github.io/post/configure_venv/</link>
      <pubDate>Sun, 10 Jul 2016 12:43:13 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/configure_venv/</guid>
      <description>安装virtualenv pip install virtualenv 创建虚拟环境 virtualenv venv venv是新创建的虚拟环境的名称。 同时会创建一个与虚拟环境名称相同的文件夹venv, 里面存储了</description>
    </item>
    
    <item>
      <title>Deploy Hugo Site on GitHub Pages</title>
      <link>http://danigong.github.io/post/deploy_hugo_site_to_github/</link>
      <pubDate>Sat, 28 May 2016 20:27:28 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/deploy_hugo_site_to_github/</guid>
      <description> 1. Create a Repository: danigong.github.io (replace danigong with your own github username) 2. Change directory to root directory of the site. 3. hugo --theme=hyde --baseUrl=&amp;quot;http://danigong.github.io/&amp;quot;   $ cd public $ git init $ git remote add origin https://github.com/danigong/danigong.github.io.git $ git add -A $ git commit -m &amp;quot;first commit&amp;quot; $ git push -u origin master   </description>
    </item>
    
    <item>
      <title>Mongodb Setup</title>
      <link>http://danigong.github.io/post/mongodb_setup/</link>
      <pubDate>Sat, 28 May 2016 20:14:28 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/mongodb_setup/</guid>
      <description> brew update brew install mongodb setup python driver for mongoldb:  pip install pymongo   </description>
    </item>
    
    <item>
      <title>Pyramid Dev Environment Setup</title>
      <link>http://danigong.github.io/post/pyramid_dev_env_set/</link>
      <pubDate>Sat, 28 May 2016 20:09:35 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/pyramid_dev_env_set/</guid>
      <description> Download Setuptool: http://peak.telecommunity.com/dist/ez_setup.py Install Setuptool: sudo python ez_setup.py Install virtulenv: sudo easy_install virtualenv Install Pyramid: virtualenv —no-site-packages env cd env bin/easy_install pyramid Will contain pyramid, template(Chameleon、Mako), PasteDeploy  </description>
    </item>
    
    <item>
      <title>A Guide to Python&#39;s Function Decorators</title>
      <link>http://danigong.github.io/post/python_decorator_guide/</link>
      <pubDate>Wed, 25 May 2016 22:26:53 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/python_decorator_guide/</guid>
      <description>Python is rich with powerful features and expressive syntax. One of my favorites is decorators. In the context of design patterns, decorators dynamically alter the functionality of a function, method or class without having to directly use subclasses. This is ideal when you need to extend the functionality of functions that you don&amp;rsquo;t want to modify. We can implement the decorator pattern anywhere, but Python facilitates the implementation by providing much more expressive features and syntax for that.</description>
    </item>
    
    <item>
      <title>Python Property</title>
      <link>http://danigong.github.io/post/python_property/</link>
      <pubDate>Mon, 13 Jul 2015 22:55:05 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/python_property/</guid>
      <description>Python“属性（property）”详解 Python中有一个被称为属性函数(property)的小概念，它可以做一些有用的事情。在这篇文</description>
    </item>
    
    <item>
      <title>PEP8 Chinese Version</title>
      <link>http://danigong.github.io/post/translated_pep8/</link>
      <pubDate>Sat, 11 Jul 2015 20:50:30 +0800</pubDate>
      
      <guid>http://danigong.github.io/post/translated_pep8/</guid>
      <description>本文给出主Python版本标准库的编码约定。CPython的C代码风格参见PEP7。 本文和PEP 257 文档字符串标准改编自Guido最初的《Py</description>
    </item>
    
    <item>
      <title></title>
      <link>http://danigong.github.io/post/pep8_english_version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://danigong.github.io/post/pep8_english_version/</guid>
      <description>Visit https://www.python.org/dev/peps/pep-0008/</description>
    </item>
    
  </channel>
</rss>